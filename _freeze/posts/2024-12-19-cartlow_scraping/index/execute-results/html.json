{
  "hash": "87cf226701bd41d20ea180e1adc32090",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shopify scraping con R\"\ndescription: \"Cartlow website\"\nauthor:\n  - name: Cristian Chiquito Valencia\n    url: https://cchiquitovalencia.github.io/\n    affiliation: Independent @ CHV\ndate: 12-19-2024\ncategories: [R, Web Scraping, Shopify, selenider] # self-defined categories\ncitation: \n  url: https://cchiquitovalencia.github.io/posts/2024-12-19-cartlow_scraping/ \nimage: cartlow_image.jpeg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\nAquí tenemos otro trabajo de Web Scraping:\n\n### Descripción del trabajo:\n\n![](images/clipboard-3009796380.png)\n\nEsta vez tenemos un poco más de complejidad. A medida que vamos desarrollando el código vamos a ir descubriendo ciertos problemas a considerar.\n\nMiremos la página:\n\n![](images/clipboard-3866221958.png)\n\n### Estrategia:\n\nVamos a:\n\n1.  Identificar la cantidad de páginas que contiene la web.\n\n    ![](images/clipboard-3708393142.png)\n\n2.  Para cada página vamos a almacenar las URL de los productos.\n\n3.  Entraremos a cada URL para identificar la cantidad de variantes que tiene el producto. Hay 3 categorias: condición, color y tamaño.\n\n    ![](images/clipboard-1139309452.png)\n\n4.  Elegimos cada uno de los botones y extraemos la información solicitada.\n\n5.  Tomaremos el tiempo que tarda cada consulta para estimar un requerido de horas.\n\n### Código:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargamos librería\nlibrary(selenider)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()    masks stats::filter()\n✖ tibble::has_name() masks selenider::has_name()\n✖ dplyr::lag()       masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(RSelenium)\n\n# Definimos la página para extraer los datos\nurl <- \"https://www.cartlow.com/uae/en/q\"\n\nwithr::deferred_clear()\n\n# En nuestra sesión permitiremos 30 segundos\n# session <- selenider_session(\n#         \"selenium\",\n#         browser = \"firefox\",\n#         timeout = 30,\n#         .env = rlang::caller_env(),\n#         view = FALSE,\n#         quiet = TRUE\n# )\n```\n:::\n\n\n\nDefinimos las funciones que nos ayudarán para el scraping:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nextraer_botones <- function(boton){\n        \n        desc_botones <- boton |> \n                purrr::map(~ .x |> \n                                   purrr::map(~ .x$class)) |> \n                unlist()\n        \n        desc_botones <- gsub(\"active\", \"\", desc_botones)\n        \n        return(list(iter_botones = desc_botones))\n        \n}\n\nextrae_imagenes <- function(producto){\n        \n        mostrando <- s(\".cz-thumblist-holder.sm-scrollbar\") |> \n                find_elements(\"a\") |> \n                as.list() |> \n                lapply(\\(x) x |> elem_attrs())\n        \n        elegir_activos <- mostrando |> \n                purrr::map(~ .x$class) \n        \n        escondidos <- elegir_activos |> \n                purrr::map(~ stringr::str_detect(.x, \"hidden\")) |> \n                unlist()\n        \n        show_block <- elegir_activos |> \n                purrr::map(~ stringr::str_detect(.x, \"show_block\")) |> \n                unlist()\n        \n        real_mostrar <- escondidos & show_block\n        \n        # Si la suma es cero implica que no hay otras variantes\n        # Las imagenes todas son de esa variante\n        if (sum(escondidos) == 0) {\n                \n                filtrando <- rep(TRUE, length(escondidos)) |> \n                        purrr::map(~ list(.x) |> unlist())\n                \n        } else {\n                \n                filtrando <- real_mostrar\n                \n        }\n        \n        #filtrando <- elegir_activos |> \n        #       purrr::map(~ stringr::str_detect(.x, \"show_block\"))\n        \n        mostrando[which(filtrando == TRUE)] |> \n                purrr::map(~ .x$`data-fullsizeimgsrc`) |> \n                unlist()\n        \n}\n\nextraer_info_variante <- function(producto){\n        \n        #- Title                xxx\n        titulo <- s(\".cart-info.text-left\") |> \n                find_element(\"h1\") |> \n                elem_text()\n        \n        # Variants\n        variante <- ss(\".mr-md-3.mr-sm-1\") |> \n                lapply(\\(x) x  |> \n                               elem_text())\n        # Images\n        imagenes_url <- extrae_imagenes() \n        \n        # Price\n        precio_final <- s(\".cart-info.text-left\") |> \n                find_element(\"#var_price\") |> \n                elem_text()\n        \n        precio_anterior <- s(\".cart-info.text-left\") |> \n                find_element(\"#var_market_price\") |> \n                elem_text()\n        \n        # Encuentra la descripcion\n        descripcion <- s(\".des-pro-sec\") |> \n                find_elements(\"li\") |> \n                lapply(\\(x) x |>  with(elem_text(x)))\n        \n        # Encuentra la categoria\n        categoria <- s(\".container.npdp-design\") |> \n                find_element(\".breadcrumb-custom\") |> \n                find_elements(\"a\") |> \n                lapply(\\(x) x |> elem_attr(\"href\"))\n        \n        return(list(titulo = titulo,\n                    imagenes_url = imagenes_url,\n                    variante = variante,\n                    precio_final = precio_final,\n                    precio_anterior = precio_anterior,\n                    descripcion = descripcion,\n                    categoria = categoria))\n}\n\n# Consolida todas las URL de la pagina mostrada\nleer_direcciones <- function(){\n        \n        s(\".products-grid\") |> \n                find_elements(\".productImage\") |> \n                lapply(\\(x) x |> \n                               find_element(\"a\") |> \n                               elem_attr(\"href\"))\n        \n}\n\npasar_pagina <- function(){\n        \n        paginacion <- s(\".pagination\") |> \n                find_elements(\"li\") |>\n                as.list() |> \n                lapply(\\(x) x |> elem_attrs()) |> \n                purrr::map(~ .x$class) |> \n                unlist()\n        \n        s(paste0(\".\", gsub(\"\\\\..$\", \"\", gsub(\" \", \".\", paginacion[length(paginacion)])))) |> \n                elem_click()\n        \n}\n\nconvertir_string <- function(button){\n        \n        sub(\"[.]$\",\"\",gsub(\"\\\\..$\", \"\", gsub(\" \", \".\", button)))\n        \n}\n\nmi_funcion <- function(listado_botones_new){\n        \n        cat(paste0(\"Aquí: \", length(listado_botones_new$iter_botones), \" a leer\\n\"))\n        \n        for (btn in 1:length(listado_botones_new$iter_botones)) {\n                \n                skip_next_loop <- FALSE\n                cat(paste0(\"___Iniciando lectura del boton: \", btn, \"\\n\"))\n                tryCatch(\n                        expr = {\n                                # ss(paste0(\".\", convertir_string(listado_botones$iter_botones[btn]))) |> \n                                #         as.list() |> \n                                #         lapply(\\(x) x |> elem_click())\n                                \n                                ss(\"button\") |> #elem_filter(is_enabled) |>  str()\n                                        elem_filter(has_exact_text(listado_botones_new$iter_botones[btn])) |> \n                                        lapply(\\(x) x |> \n                                                       elem_click())\n                                \n                                Sys.sleep(0.5)\n                                \n                                #cat(paste0(\"\", \"\\n\"))\n                                guardar_info <- extraer_info_variante()\n                                \n                                cat(paste0(\"___Terminamos lectura de variantes\", \"\\n\"))\n                                info_producto[[btn]] <- guardar_info\n                        },\n                        error = function(e) {\n                                # Manejar el error aquí\n                                print(paste(\"Error en la iteración\", btn, \": \", e$message))\n                                # Continuar con el bucle for\n                                skip_next_loop <- TRUE\n                        }\n                )\n                if (skip_next_loop) {\n                        next\n                }\n        }\n        \n        return(info_producto)\n}\n\notra_funcion <- function(consolidar_direcciones) {\n        ejecutar <- list()\n        timings <- list()\n        \n        for (product in 1:length(consolidar_direcciones)) {\n                tryCatch(\n                        {\n                                tictoc::tic(product)\n                                cat(\"Iniciamos scraping del producto: \", product, \"\\n\")\n                                \n                                open_url(paste0(\"https://www.cartlow.com/\", consolidar_direcciones[[product]]))\n                                \n                                Sys.sleep(1)\n                                \n                                texto_botones <- s(\".cart-info.text-left\") |> \n                                        find_elements(\".prd-condition.mb-3\") |> \n                                        as.list() |> \n                                        lapply(\\(x) x |> find_elements(\".btn\") |> \n                                                       lapply(\\(x) x |> elem_text()))\n                                \n                                listado_botones_new <- list(iter_botones = unlist(texto_botones))\n                                \n                                info_producto <- vector(\"list\", length(listado_botones_new$iter_botones))\n                                guardar_info <- list()\n                                \n                                ejecutar[[product]] <- mi_funcion(listado_botones_new)\n                                \n                                cat(\"Terminamos scraping del producto: \", product, \"\\n\\n\")\n                                tictoc::toc(log = TRUE, quiet = TRUE)\n                                \n                        },\n                        error = function(e) {\n                                cat(\"Error occurred while processing product\", product, \"\\n\")\n                                # You can log the error, send an email, or do something else\n                                # For example, you can log the error to a file:\n                                sink(\"error.log\")\n                                cat(\"Error: \", str(e), \"\\n\")\n                                sink()\n                        }\n                )\n        }\n        \n        log.txt <- tictoc::tic.log(format = TRUE)\n        log.lst <- tictoc::tic.log(format = FALSE)\n        \n        tictoc::tic.clearlog()\n        \n        timings <- unlist(lapply(log.lst, function(x) x$toc - x$tic))\n        \n        return(list(ejecutar = ejecutar, tiempos = timings))\n}\n\ncalcula_cantidad_variante <- function(bd){\n        \n        bd$ejecutar |> \n                lapply(\\(x) x |> \n                               purrr::map(~ (unlist(.x$variante)))) |> \n                lapply(\\(x) length(x)) |> \n                unlist()\n        \n}\n\norganizar_tiempos <- function(tabla, bd){\n        \n        entregar <- tabla |> \n                dplyr::mutate(cantidad = calcula_cantidad_variante(bd)[1:length(tabla[,1])]) \n        \n        names(entregar) <- c(\"tiempos\", \"cantidad\")\n        \n        entregar\n}\n```\n:::\n\n\n\nDeclaradas las funciones que vamos a usar, empecemos a ejecutar:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Abrir la página\nopen_url(url)\n\nSys.sleep(2)\n\n# Identificar cantidad de paginas\npaginas <- s(\".pagination\") |> \n        find_elements(\"li\") |>\n        lapply(\\(x) x |> \n                       elem_text())\n\npaginas <- as.numeric(paginas[[length(paginas)-1]])\n\n\nconsolidar_direcciones <- list()\n\n# Obtener URL de cada producto\nfor (pagina in 1:3) {\n        \n        cat(paste0(\"Estamos en la página: \", pagina, \"\\n\"))\n        \n        # Leer las URL de las imagenes\n        direcciones <- leer_direcciones()\n        \n        # Agregar las URL\n        consolidar_direcciones <- append(consolidar_direcciones,\n                                         direcciones)\n        \n        # Pasar a la siguiente página\n        pasar_pagina()\n        \n        cat(paste0(\"...pasando a la siguiente página\", \"\\n\"))\n        \n        Sys.sleep(1)\n        \n}\n```\n:::\n\n\n\nPor ahora solo vamos a explorar el tiempo que tarda la lectura de datos en las primeras 3 páginas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_info <- list()\nbd_info <- otra_funcion(consolidar_direcciones)\n```\n:::\n\n\n\nAquí deberás hacer un salto de fe y creerme que la siguiente información no la inventé, sino que son los resultados del código ejecutado de manera local. Guardé los datos en 3 archivos diferentes adjuntos. Habrás notado que los dos anteriores chunks estaban programados para no ejecutarse:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_info <- readRDS(file = \"./DBcartlowNOJS.RDS\")\nbd_info1 <- readRDS(file = \"./DBcartlow1120.RDS\")\nbd_info2 <- readRDS(file = \"./DBcartlow2150.RDS\")\n    \ntbl_tiempos <- list(bd_info, bd_info1, bd_info2) |> \n        purrr::map(~ organizar_tiempos(.x$tiempos |> as.data.frame(),\n                                       .x)) |> \n        dplyr::bind_rows() |> \n        dplyr::mutate(media = tiempos / cantidad) |> \n        dplyr::filter(cantidad != 0)\n```\n:::\n\n\n\nRevisamos gráficamente la distribución de tiempos de extracción por la cantidad de variantes que contenga el producto:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_tiempos |> \n        ggplot2::ggplot(ggplot2::aes(factor(cantidad), as.numeric(tiempos/60)))+\n        ggplot2::geom_boxplot()+\n        hrbrthemes::theme_ipsum()+\n        ggplot2::scale_y_continuous(breaks = c(seq(0, 90, by = 3)))+\n        ggplot2::labs(x = \"Cantidad de variantes\",\n                      y = \"Tiempo de búsqueda (min)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/graficar_1-1.png){width=672}\n:::\n:::\n\n\n\nCalculamos una variable para estimar el total:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_variantes <- tbl_tiempos |> \n        dplyr::group_by(cantidad) |> \n        dplyr::summarise(cuenta = dplyr::n(),\n                         media = round(mean(media), 2)) |> \n        dplyr::mutate(prop = round(100 * cuenta / sum(cuenta),2))\n\ndist_variantes |> \n    gt::gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"anezbcfbte\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#anezbcfbte table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#anezbcfbte thead, #anezbcfbte tbody, #anezbcfbte tfoot, #anezbcfbte tr, #anezbcfbte td, #anezbcfbte th {\n  border-style: none;\n}\n\n#anezbcfbte p {\n  margin: 0;\n  padding: 0;\n}\n\n#anezbcfbte .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#anezbcfbte .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#anezbcfbte .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#anezbcfbte .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#anezbcfbte .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#anezbcfbte .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#anezbcfbte .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#anezbcfbte .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#anezbcfbte .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#anezbcfbte .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#anezbcfbte .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#anezbcfbte .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#anezbcfbte .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#anezbcfbte .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#anezbcfbte .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#anezbcfbte .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#anezbcfbte .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#anezbcfbte .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#anezbcfbte .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#anezbcfbte .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#anezbcfbte .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#anezbcfbte .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#anezbcfbte .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#anezbcfbte .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#anezbcfbte .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#anezbcfbte .gt_left {\n  text-align: left;\n}\n\n#anezbcfbte .gt_center {\n  text-align: center;\n}\n\n#anezbcfbte .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#anezbcfbte .gt_font_normal {\n  font-weight: normal;\n}\n\n#anezbcfbte .gt_font_bold {\n  font-weight: bold;\n}\n\n#anezbcfbte .gt_font_italic {\n  font-style: italic;\n}\n\n#anezbcfbte .gt_super {\n  font-size: 65%;\n}\n\n#anezbcfbte .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#anezbcfbte .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#anezbcfbte .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#anezbcfbte .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#anezbcfbte .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#anezbcfbte .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#anezbcfbte .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#anezbcfbte .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#anezbcfbte div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cantidad\">cantidad</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cuenta\">cuenta</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"media\">media</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"prop\">prop</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">1</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">23</td>\n<td headers=\"media\" class=\"gt_row gt_right\">97.16</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">47.92</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">2</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">7</td>\n<td headers=\"media\" class=\"gt_row gt_right\">46.38</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">14.58</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">3</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">7</td>\n<td headers=\"media\" class=\"gt_row gt_right\">55.80</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">14.58</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">4</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">5</td>\n<td headers=\"media\" class=\"gt_row gt_right\">50.33</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">10.42</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">5</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">1</td>\n<td headers=\"media\" class=\"gt_row gt_right\">62.30</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">2.08</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">6</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">2</td>\n<td headers=\"media\" class=\"gt_row gt_right\">36.38</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">4.17</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">8</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">2</td>\n<td headers=\"media\" class=\"gt_row gt_right\">109.35</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">4.17</td></tr>\n    <tr><td headers=\"cantidad\" class=\"gt_row gt_right\">11</td>\n<td headers=\"cuenta\" class=\"gt_row gt_right\">1</td>\n<td headers=\"media\" class=\"gt_row gt_right\">212.98</td>\n<td headers=\"prop\" class=\"gt_row gt_right\">2.08</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\nLuego de revisar la cantidad de productos por página (30) y la cantidad de páginas promedio (920) podemos hacer una estimación de la cantidad de horas que podríamos tardar haciendo el ejercicio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos <- sample(dist_variantes$cantidad,\n       size = 920*30,\n       replace = TRUE,\n       prob = dist_variantes$prop)\n\ntable(datos) |> \n        data.frame() |> \n        cbind(media = dist_variantes$media) |> \n        dplyr::mutate(total = Freq * media * as.numeric(datos)) |> \n        dplyr::summarise(total = sum(total)/(3600))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     total\n1 1453.796\n```\n\n\n:::\n:::\n\n\n\n### Consideraciones:\n\n-   Leer cada página de resultados (aproximadamente entre 915 y 925) toma unos 5 segundos. Por defecto, se muestran 30 productos en cada vista.\n\n-   Identificar el número de opciones por producto (varía entre 1 y 11 según los resultados obtenidos, aunque imagino que es posible encontrar más) toma unos 20 segundos.\n\n-   Identificar los datos de variantes para cada producto (depende de la conexión a Internet y el procesador, estoy trabajando localmente) toma unos 110 segundos.\n\n-   Dependiendo de lo que estés tratando de lograr con el scraping web, el tiempo de búsqueda puede aumentar significativamente, lo que está influenciado por la cantidad de opciones que tiene cada producto. Si tienes 3 opciones para \"Condición\", 5 para \"Color\" y 3 para \"Talla\", seguramente sabes que no son 11 iteraciones para realizar.\n\n-   Con los datos que obtuve, se podría estimar un total de 920 páginas \\* 30 productos por página = 1438 horas. Hay un 47% de probabilidad de que los productos tengan solo 1 variante, un 15% para 2 y un 3%.\n\n-   Es probablemente infructífero hacerlo con solo un ordenador. Debes encontrar una forma de hacerlo en paralelo.\n\n-   Debes encontrar una forma de garantizar que no se repita la información en la base de datos que uses.\n\n-   Ten en cuenta que tendrás que desarrollar una idea para manejar la información cuando los productos cambian en la página.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}